function ImaEdge = edgeDet(Ima)%Function to peform edge detectionIma = uint8(Ima);if(isa(Ima, 'logical'))	ImaEdge = Ima;	disp('The image is not a grayscale image, it cannot be operated!!')	returnendc = 'y';while(c == 'y')	disp('');	disp('Which process would you like to use for detecting the edges?')	disp(' [0] Cancel')	disp(' [1] Built-in function edge(IM, METHOD)')	disp(' [2] Built-in function edge(IM, THRESHOLD, METHOD)')	disp(' [3] Manual methods using the gradient')	disp('');	ope = input('Which process would you like to use for the edge detection? [0...3]: ');		switch ope		case 0			ImaEdge = Ima;			break		case 1			disp('Possible methods')			disp(' Sobel')			disp(' Prewitt')			disp(' Roberts')			disp(' LoG')			disp(' Canny')			method = input('Which method would you like to use? ','s');			[ImaEdge, THRESH] = edge(Ima, method);					case 2			disp('Possible methods')			disp(' Sobel')			disp(' Prewitt')			disp(' Roberts')			disp(' LoG')			disp(' Canny')			method = input('Which method would you like to use? ','s');			threshold = input('Which Threshold values would you like to use? >0 <1: ');			[ImaEdge, THRESH] = edge(Ima, method, threshold);					case 3			msgbox('Still in development');			continue	end		figure(4)	%subplot(1,2,1)	%imshow(Ima, [0 255]);	%title('Original Image');	%subplot(1,2,2)	imshow(ImaEdge, [0 1]);	title(['Image With Detected Edges Using: ', method, ' Threshold: ', num2str(THRESH)])		while(true)		c = lower(input('Would you like to try a different method? y/n: ','s'));		if(c == 'y')			break		else			msgbox('You are now working with a image with detected edges!!','modal');			break		end	end	endend