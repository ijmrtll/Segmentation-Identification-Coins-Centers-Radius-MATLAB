function [Ima, histo, centers, radii] = runPart2(Ima, im, names, coins, imSet)histo = [];centers = [];radii = [];while (true)	viewImage(Ima, im, names, 1);	analysis = runMenu2Gray;		switch analysis		case 0			%Exit			break		case 1			%View Image			disp('Ok!')		case 2			%View Histogram			histo = viewHistogram(Ima, im, names);			disp('Ok!')					case 3			%im2BW			if imSet == 1				Ima = imBW(Ima, im, names);			else				if input('What color space would you like to work? [1]RGB [2]HSV: ') == 1					Ima = imBWrgb(Ima, im, names);				else					Ima = imBWhsv(Ima, im, names);				end			end			disp('Ok!')					case 4			%Edge Detection			Ima = edgeDet(Ima);			disp('Ok!')					case 5			%Smoothing Filter			Ima = imFilt(Ima);			disp('Ok!')					case 6			%Histogram Transformation			Ima = histT(Ima);			disp('Ok!')					case 7			%Morphological Operations			Ima = imMor(Ima, im, names);			disp('Ok!')					case 8			%Find circles			[centers, radii, ~] = findCircles(Ima, im, names);			figure(11)			imagesc(coins(:,:,:,im)); colormap gray;			hold on			for i=1:size(centers)				plot(centers(i,1),centers(i,2),'g.','MarkerSize',10)			end			hold off			if size(radii) > 0				viscircles(centers, radii,'Color','b');				title(strcat('Test Image',' #', num2str(im), ': ', names(im), 'with centers'));			end		case 9			%Change Image			numNames = size(names);			im = input(['Which test image would you like to analyze? [1...',num2str(numNames(2)), ']: ']);			Ima = coins(:,:,:,im);			viewImage(Ima, im, names, 10);			disp('Ok!')					case 10			%Reset Image			Ima = coins(:,:,:,im);			msgbox('The Image was reseted successfully!!', 'modal');			disp('Ok!')					case 11			Ima = runAnalysis2(Ima, im, imSet);			%msgbox('Still in development');			%Automatic Analysis					case 12			%set template for matching filter			g = imtool(Ima);			pause			close(g)	endendend